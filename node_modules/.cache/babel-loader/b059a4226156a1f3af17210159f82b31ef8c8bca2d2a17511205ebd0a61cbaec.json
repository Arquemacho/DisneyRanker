{"ast":null,"code":"var _jsxFileName = \"/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport movies from './movies'; // Your list of movies\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  const [currentRound, setCurrentRound] = useState([]);\n  const [nextRound, setNextRound] = useState([]);\n  const [winner, setWinner] = useState('');\n  useEffect(() => {\n    const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n    // Handle seeding if the number of movies is not a power of 2\n    const seedCount = Math.pow(2, Math.ceil(Math.log2(shuffledMovies.length))) - shuffledMovies.length;\n    const seededMovies = shuffledMovies.splice(-seedCount);\n    setNextRound(seededMovies);\n    setCurrentRound(shuffledMovies);\n  }, []);\n  const selectMovie = movie => {\n    setNextRound(prev => [...prev, movie]);\n    if (currentRound.length <= 2) {\n      setWinner(movie);\n    } else if (nextRound.length >= Math.floor(currentRound.length / 2)) {\n      setCurrentRound(nextRound);\n      setNextRound([]);\n    }\n  };\n  const getRoundName = numMovies => {\n    if (numMovies === 2) return 'Final';\n    if (numMovies <= 4) return 'SemiFinals';\n    if (numMovies <= 8) return 'QuarterFinals';\n    if (numMovies <= 16) return 'Octavos de Final';\n    return `Round of ${numMovies}`;\n  };\n  const currentMatchupNumber = nextRound.length * 2 - currentRound.length + 1;\n  const totalMatchups = currentRound.length / 2;\n  const roundName = getRoundName(currentRound.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tournament Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), !winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Matchup: \", currentMatchupNumber, \" out of \", totalMatchups]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Round: \", roundName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Winner:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MoviePoster, {\n        title: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentRound.map((movie, index) => index % 2 === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matchup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          onClick: () => selectMovie(movie),\n          children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n            title: movie\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 33\n        }, this), currentRound[index + 1] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          onClick: () => selectMovie(currentRound[index + 1]),\n          children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n            title: currentRound[index + 1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 37\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Tournament, \"2E8tHkgNhP1qj6mNGEGLpW6ghWA=\");\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useEffect","movies","MoviePoster","jsxDEV","_jsxDEV","Tournament","_s","currentRound","setCurrentRound","nextRound","setNextRound","winner","setWinner","shuffledMovies","sort","Math","random","seedCount","pow","ceil","log2","length","seededMovies","splice","selectMovie","movie","prev","floor","getRoundName","numMovies","currentMatchupNumber","totalMatchups","roundName","children","fileName","_jsxFileName","lineNumber","columnNumber","title","map","index","className","onClick","_c","$RefreshReg$"],"sources":["/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movies from './movies'; // Your list of movies\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\n\nconst Tournament = () => {\n    const [currentRound, setCurrentRound] = useState([]);\n    const [nextRound, setNextRound] = useState([]);\n    const [winner, setWinner] = useState('');\n\n    useEffect(() => {\n        const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n        // Handle seeding if the number of movies is not a power of 2\n        const seedCount = Math.pow(2, Math.ceil(Math.log2(shuffledMovies.length))) - shuffledMovies.length;\n        const seededMovies = shuffledMovies.splice(-seedCount);\n        setNextRound(seededMovies);\n        setCurrentRound(shuffledMovies);\n    }, []);\n\n    const selectMovie = (movie) => {\n        setNextRound(prev => [...prev, movie]);\n        if (currentRound.length <= 2) {\n            setWinner(movie);\n        } else if (nextRound.length >= Math.floor(currentRound.length / 2)) {\n            setCurrentRound(nextRound);\n            setNextRound([]);\n        }\n    };\n\n    const getRoundName = (numMovies) => {\n        if (numMovies === 2) return 'Final';\n        if (numMovies <= 4) return 'SemiFinals';\n        if (numMovies <= 8) return 'QuarterFinals';\n        if (numMovies <= 16) return 'Octavos de Final';\n        return `Round of ${numMovies}`;\n    };\n\n    const currentMatchupNumber = (nextRound.length * 2) - currentRound.length + 1;\n    const totalMatchups = currentRound.length / 2;\n    const roundName = getRoundName(currentRound.length);\n\n    return (\n        <div>\n            <h2>Tournament Mode</h2>\n            {!winner && (\n                <div>\n                    <p>Current Matchup: {currentMatchupNumber} out of {totalMatchups}</p>\n                    <p>Current Round: {roundName}</p>\n                </div>\n            )}\n            {winner ? (\n                <div>\n                    <h3>Winner:</h3>\n                    <MoviePoster title={winner} />\n                </div>\n            ) : (\n                <div>\n                    {currentRound.map((movie, index) => (\n                        index % 2 === 0 && (\n                            <div key={index} className=\"matchup\">\n                                <div className=\"card\" onClick={() => selectMovie(movie)}>\n                                    <MoviePoster title={movie} />\n                                </div>\n                                {currentRound[index + 1] && (\n                                    <div className=\"card\" onClick={() => selectMovie(currentRound[index + 1])}>\n                                        <MoviePoster title={currentRound[index + 1]} />\n                                    </div>\n                                )}\n                            </div>\n                        )\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Tournament;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}