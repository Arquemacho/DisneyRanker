{"ast":null,"code":"var _jsxFileName = \"/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  const [currentRound, setCurrentRound] = useState([]);\n  const [nextRound, setNextRound] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [matchupIndex, setMatchupIndex] = useState(0);\n  useEffect(() => {\n    initializeTournament();\n  }, []);\n  const initializeTournament = () => {\n    const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n    const initialRound = [];\n    while (shuffledMovies.length) {\n      initialRound.push([shuffledMovies.shift(), shuffledMovies.shift()].filter(Boolean));\n    }\n    setCurrentRound(initialRound);\n    setNextRound([]);\n    setWinner(null);\n    setMatchupIndex(0);\n  };\n  const selectMovie = movie => {\n    if (winner) return; // Ignore selections if a winner is already declared\n\n    let updatedNextRound = [...nextRound, movie]; // Add selected movie to the next round\n\n    // If it's the last matchup of the current round\n    if (matchupIndex === currentRound.length - 1) {\n      // Check if this is the final round\n      if (updatedNextRound.length === 1) {\n        // Declare the winner if only one movie is left\n        setWinner(updatedNextRound[0]);\n      } else {\n        // Else, start a new round with the movies in the next round\n        setCurrentRound(createRound(updatedNextRound));\n        setNextRound([]);\n        setMatchupIndex(0);\n      }\n    } else {\n      // Move to the next matchup in the current round\n      setMatchupIndex(prevIndex => prevIndex + 1);\n    }\n  };\n  const createRound = winners => {\n    let newRound = [];\n    for (let i = 0; i < winners.length; i += 2) {\n      newRound.push(winners.slice(i, i + 2));\n    }\n    return newRound;\n  };\n  const getRoundName = numMovies => {\n    if (numMovies <= 2) return 'Final';\n    if (numMovies <= 4) return 'Semi Finals';\n    if (numMovies <= 8) return 'Quarter Finals';\n    if (numMovies <= 16) return 'Round of 16';\n    if (numMovies <= 32) return 'Round of 32';\n    if (numMovies <= 64) return 'Round of 64';\n    if (numMovies <= 128) return 'Round of 128';\n    if (numMovies <= 256) return 'Round of 256';\n    if (numMovies <= 512) return 'Round of 512';\n    if (numMovies <= 1024) return 'Round of 1024';\n    return '';\n  };\n  if (winner) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Winner:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MoviePoster, {\n        title: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n  const roundName = getRoundName(currentRound.length * 2 + nextRound.length);\n  const totalMatchups = currentRound.length + Math.ceil(nextRound.length / 2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tournament Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), !winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Matchup: \", matchupIndex + 1, \" out of \", totalMatchups]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Round: \", roundName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matchup\",\n        children: currentRound[matchupIndex] && currentRound[matchupIndex].map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          onClick: () => selectMovie(movie),\n          children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n            title: movie\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(Tournament, \"g2y5g7W3BfU9HH/eE88wJSv4GXE=\");\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useEffect","movies","MoviePoster","jsxDEV","_jsxDEV","Tournament","_s","currentRound","setCurrentRound","nextRound","setNextRound","winner","setWinner","matchupIndex","setMatchupIndex","initializeTournament","shuffledMovies","sort","Math","random","initialRound","length","push","shift","filter","Boolean","selectMovie","movie","updatedNextRound","createRound","prevIndex","winners","newRound","i","slice","getRoundName","numMovies","children","fileName","_jsxFileName","lineNumber","columnNumber","title","roundName","totalMatchups","ceil","className","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\n\nconst Tournament = () => {\n    const [currentRound, setCurrentRound] = useState([]);\n    const [nextRound, setNextRound] = useState([]);\n    const [winner, setWinner] = useState(null);\n    const [matchupIndex, setMatchupIndex] = useState(0);\n\n    useEffect(() => {\n        initializeTournament();\n    }, []);\n\n    const initializeTournament = () => {\n        const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n        const initialRound = [];\n\n        while (shuffledMovies.length) {\n            initialRound.push([shuffledMovies.shift(), shuffledMovies.shift()].filter(Boolean));\n        }\n\n        setCurrentRound(initialRound);\n        setNextRound([]);\n        setWinner(null);\n        setMatchupIndex(0);\n    };\n\n    const selectMovie = (movie) => {\n        if (winner) return; // Ignore selections if a winner is already declared\n\n        let updatedNextRound = [...nextRound, movie]; // Add selected movie to the next round\n\n        // If it's the last matchup of the current round\n        if (matchupIndex === currentRound.length - 1) {\n            // Check if this is the final round\n            if (updatedNextRound.length === 1) {\n                // Declare the winner if only one movie is left\n                setWinner(updatedNextRound[0]);\n            } else {\n                // Else, start a new round with the movies in the next round\n                setCurrentRound(createRound(updatedNextRound));\n                setNextRound([]);\n                setMatchupIndex(0);\n            }\n        } else {\n            // Move to the next matchup in the current round\n            setMatchupIndex(prevIndex => prevIndex + 1);\n        }\n    };\n\n\n\n\n    const createRound = (winners) => {\n        let newRound = [];\n        for (let i = 0; i < winners.length; i += 2) {\n            newRound.push(winners.slice(i, i + 2));\n        }\n        return newRound;\n    };\n\n\n\n    const getRoundName = (numMovies) => {\n        if (numMovies <= 2) return 'Final';\n        if (numMovies <= 4) return 'Semi Finals';\n        if (numMovies <= 8) return 'Quarter Finals';\n        if (numMovies <= 16) return 'Round of 16';\n        if (numMovies <= 32) return 'Round of 32';\n        if (numMovies <= 64) return 'Round of 64';\n        if (numMovies <= 128) return 'Round of 128';\n        if (numMovies <= 256) return 'Round of 256';\n        if (numMovies <= 512) return 'Round of 512';\n        if (numMovies <= 1024) return 'Round of 1024';\n        return '';\n    };\n\n    if (winner) {\n        return (\n            <div>\n                <h3>Winner:</h3>\n                <MoviePoster title={winner} />\n            </div>\n        );\n    }\n\n    const roundName = getRoundName(currentRound.length * 2 + nextRound.length);\n    const totalMatchups = currentRound.length + Math.ceil(nextRound.length / 2);\n\n    return (\n        <div>\n            <h2>Tournament Mode</h2>\n            {!winner && (\n                <div>\n                    <p>Current Matchup: {matchupIndex + 1} out of {totalMatchups}</p>\n                    <p>Current Round: {roundName}</p>\n                    <div className=\"matchup\">\n                        {currentRound[matchupIndex] && currentRound[matchupIndex].map((movie, index) => (\n                            <div key={index} className=\"card\" onClick={() => selectMovie(movie)}>\n                                <MoviePoster title={movie} />\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Tournament;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}