{"ast":null,"code":"var _jsxFileName = \"/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  const [currentRound, setCurrentRound] = useState([]);\n  const [nextRound, setNextRound] = useState([]);\n  const [automaticWinners, setAutomaticWinners] = useState([]); // New state variable for automatic winners\n  const [matchupIndex, setMatchupIndex] = useState(0);\n  const [winner, setWinner] = useState('');\n  const totalMovies = movies.length;\n  const previousPowerOf2 = Math.pow(2, Math.floor(Math.log2(totalMovies)));\n  const difference = totalMovies - previousPowerOf2;\n  const initialMatchupsCount = difference * 2;\n  useEffect(() => {\n    const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n    const previousPowerOf2 = Math.pow(2, Math.floor(Math.log2(totalMovies)));\n    const difference = totalMovies - previousPowerOf2;\n    const initialMatchupsCount = difference > 0 ? difference * 2 : totalMovies;\n    let initialMatchups = [];\n    let automaticWinners = [];\n    if (difference > 0) {\n      automaticWinners = shuffledMovies.slice(0, previousPowerOf2 - difference);\n      for (let i = previousPowerOf2 - difference; i < previousPowerOf2 + difference; i += 2) {\n        initialMatchups.push([shuffledMovies[i], shuffledMovies[i + 1]]);\n      }\n    } else {\n      // If no initial matchups are needed, all movies go into the first round\n      for (let i = 0; i < totalMovies; i += 2) {\n        initialMatchups.push([shuffledMovies[i], shuffledMovies[i + 1]]);\n      }\n    }\n    setCurrentRound(initialMatchups);\n    setNextRound(automaticWinners);\n  }, []);\n  const selectMovie = movie => {\n    let updatedNextRound = [...nextRound, movie];\n    if (updatedNextRound.length >= currentRound.length) {\n      if (updatedNextRound.length === 1) {\n        setWinner(movie);\n      } else {\n        let newRound = [];\n        for (let i = 0; i < updatedNextRound.length; i += 2) {\n          newRound.push([updatedNextRound[i], updatedNextRound[i + 1]]);\n        }\n        setCurrentRound(newRound);\n        setNextRound([]);\n        setMatchupIndex(0);\n      }\n    } else {\n      setMatchupIndex(matchupIndex + 1);\n    }\n  };\n  const goBack = () => {\n    if (matchupIndex > 0) {\n      setNextRound(nextRound.slice(0, -1));\n      setMatchupIndex(matchupIndex - 1);\n    }\n  };\n  const getRoundName = numMovies => {\n    if (numMovies <= 2) return 'Final';\n    if (numMovies <= 4) return 'Semi Finals';\n    if (numMovies <= 8) return 'Quarter Finals';\n    if (numMovies <= 16) return 'Round of 16';\n    if (numMovies <= 32) return 'Round of 32';\n    if (numMovies <= 64) return 'Round of 64';\n    if (numMovies <= 128) return 'Round of 128';\n    if (numMovies <= 256) return 'Round of 256';\n    if (numMovies <= 512) return 'Round of 512';\n    if (numMovies <= 1024) return 'Round of 1024';\n    return '';\n  };\n  const currentMatchupNumber = matchupIndex + 1;\n  const totalMatchups = currentRound.length + automaticWinners.length / 2;\n  const roundName = getRoundName(currentRound.length * 2 + automaticWinners.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tournament Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), !winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Matchup: \", currentMatchupNumber, \" out of \", totalMatchups]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Round: \", roundName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Winner:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MoviePoster, {\n        title: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [currentRound.length > 0 && currentRound[matchupIndex] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"matchup\",\n        children: currentRound[matchupIndex].map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          onClick: () => selectMovie(movie),\n          children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n            title: movie\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 37\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this), matchupIndex > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goBack,\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(Tournament, \"QKq/8jdPZv5hSNR2mVvKOajsXAg=\");\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useEffect","movies","MoviePoster","jsxDEV","_jsxDEV","Tournament","_s","currentRound","setCurrentRound","nextRound","setNextRound","automaticWinners","setAutomaticWinners","matchupIndex","setMatchupIndex","winner","setWinner","totalMovies","length","previousPowerOf2","Math","pow","floor","log2","difference","initialMatchupsCount","shuffledMovies","sort","random","initialMatchups","slice","i","push","selectMovie","movie","updatedNextRound","newRound","goBack","getRoundName","numMovies","currentMatchupNumber","totalMatchups","roundName","children","fileName","_jsxFileName","lineNumber","columnNumber","title","className","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\n\nconst Tournament = () => {\n    const [currentRound, setCurrentRound] = useState([]);\n    const [nextRound, setNextRound] = useState([]);\n    const [automaticWinners, setAutomaticWinners] = useState([]); // New state variable for automatic winners\n    const [matchupIndex, setMatchupIndex] = useState(0);\n    const [winner, setWinner] = useState('');\n\n    const totalMovies = movies.length;\n    const previousPowerOf2 = Math.pow(2, Math.floor(Math.log2(totalMovies)));\n    const difference = totalMovies - previousPowerOf2;\n    const initialMatchupsCount = difference * 2;\n\n    useEffect(() => {\n        const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n        const previousPowerOf2 = Math.pow(2, Math.floor(Math.log2(totalMovies)));\n        const difference = totalMovies - previousPowerOf2;\n        const initialMatchupsCount = difference > 0 ? difference * 2 : totalMovies;\n\n        let initialMatchups = [];\n        let automaticWinners = [];\n\n        if (difference > 0) {\n            automaticWinners = shuffledMovies.slice(0, previousPowerOf2 - difference);\n            for (let i = previousPowerOf2 - difference; i < previousPowerOf2 + difference; i += 2) {\n                initialMatchups.push([shuffledMovies[i], shuffledMovies[i + 1]]);\n            }\n        } else {\n            // If no initial matchups are needed, all movies go into the first round\n            for (let i = 0; i < totalMovies; i += 2) {\n                initialMatchups.push([shuffledMovies[i], shuffledMovies[i + 1]]);\n            }\n        }\n\n        setCurrentRound(initialMatchups);\n        setNextRound(automaticWinners);\n    }, []);\n\n    const selectMovie = (movie) => {\n        let updatedNextRound = [...nextRound, movie];\n\n        if (updatedNextRound.length >= currentRound.length) {\n            if (updatedNextRound.length === 1) {\n                setWinner(movie);\n            } else {\n                let newRound = [];\n                for (let i = 0; i < updatedNextRound.length; i += 2) {\n                    newRound.push([updatedNextRound[i], updatedNextRound[i + 1]]);\n                }\n                setCurrentRound(newRound);\n                setNextRound([]);\n                setMatchupIndex(0);\n            }\n        } else {\n            setMatchupIndex(matchupIndex + 1);\n        }\n    };\n\n    const goBack = () => {\n        if (matchupIndex > 0) {\n            setNextRound(nextRound.slice(0, -1));\n            setMatchupIndex(matchupIndex - 1);\n        }\n    };\n\n\n    const getRoundName = (numMovies) => {\n        if (numMovies <= 2) return 'Final';\n        if (numMovies <= 4) return 'Semi Finals';\n        if (numMovies <= 8) return 'Quarter Finals';\n        if (numMovies <= 16) return 'Round of 16';\n        if (numMovies <= 32) return 'Round of 32';\n        if (numMovies <= 64) return 'Round of 64';\n        if (numMovies <= 128) return 'Round of 128';\n        if (numMovies <= 256) return 'Round of 256';\n        if (numMovies <= 512) return 'Round of 512';\n        if (numMovies <= 1024) return 'Round of 1024';\n        return '';\n    };\n\n    const currentMatchupNumber = matchupIndex + 1;\n    const totalMatchups = currentRound.length + automaticWinners.length / 2;\n    const roundName = getRoundName(currentRound.length * 2 + automaticWinners.length);\n\n    return (\n        <div>\n            <h2>Tournament Mode</h2>\n            {!winner && (\n                <div>\n                    <p>Current Matchup: {currentMatchupNumber} out of {totalMatchups}</p>\n                    <p>Current Round: {roundName}</p>\n                </div>\n            )}\n            {winner ? (\n                <div>\n                    <h3>Winner:</h3>\n                    <MoviePoster title={winner} />\n                </div>\n            ) : (\n                <div>\n                    {currentRound.length > 0 && currentRound[matchupIndex] && (\n                        <div className=\"matchup\">\n                            {currentRound[matchupIndex].map((movie, index) => (\n                                <div key={index} className=\"card\" onClick={() => selectMovie(movie)}>\n                                    <MoviePoster title={movie} />\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    {matchupIndex > 0 && <button onClick={goBack}>Go Back</button>}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Tournament;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMkB,WAAW,GAAGhB,MAAM,CAACiB,MAAM;EACjC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,IAAI,CAACN,WAAW,CAAC,CAAC,CAAC;EACxE,MAAMO,UAAU,GAAGP,WAAW,GAAGE,gBAAgB;EACjD,MAAMM,oBAAoB,GAAGD,UAAU,GAAG,CAAC;EAE3CxB,SAAS,CAAC,MAAM;IACZ,MAAM0B,cAAc,GAAG,CAAC,GAAGzB,MAAM,CAAC,CAAC0B,IAAI,CAAC,MAAM,GAAG,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,CAAC;IAClE,MAAMT,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,IAAI,CAACN,WAAW,CAAC,CAAC,CAAC;IACxE,MAAMO,UAAU,GAAGP,WAAW,GAAGE,gBAAgB;IACjD,MAAMM,oBAAoB,GAAGD,UAAU,GAAG,CAAC,GAAGA,UAAU,GAAG,CAAC,GAAGP,WAAW;IAE1E,IAAIY,eAAe,GAAG,EAAE;IACxB,IAAIlB,gBAAgB,GAAG,EAAE;IAEzB,IAAIa,UAAU,GAAG,CAAC,EAAE;MAChBb,gBAAgB,GAAGe,cAAc,CAACI,KAAK,CAAC,CAAC,EAAEX,gBAAgB,GAAGK,UAAU,CAAC;MACzE,KAAK,IAAIO,CAAC,GAAGZ,gBAAgB,GAAGK,UAAU,EAAEO,CAAC,GAAGZ,gBAAgB,GAAGK,UAAU,EAAEO,CAAC,IAAI,CAAC,EAAE;QACnFF,eAAe,CAACG,IAAI,CAAC,CAACN,cAAc,CAACK,CAAC,CAAC,EAAEL,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACpE;IACJ,CAAC,MAAM;MACH;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,WAAW,EAAEc,CAAC,IAAI,CAAC,EAAE;QACrCF,eAAe,CAACG,IAAI,CAAC,CAACN,cAAc,CAACK,CAAC,CAAC,EAAEL,cAAc,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACpE;IACJ;IAEAvB,eAAe,CAACqB,eAAe,CAAC;IAChCnB,YAAY,CAACC,gBAAgB,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsB,WAAW,GAAIC,KAAK,IAAK;IAC3B,IAAIC,gBAAgB,GAAG,CAAC,GAAG1B,SAAS,EAAEyB,KAAK,CAAC;IAE5C,IAAIC,gBAAgB,CAACjB,MAAM,IAAIX,YAAY,CAACW,MAAM,EAAE;MAChD,IAAIiB,gBAAgB,CAACjB,MAAM,KAAK,CAAC,EAAE;QAC/BF,SAAS,CAACkB,KAAK,CAAC;MACpB,CAAC,MAAM;QACH,IAAIE,QAAQ,GAAG,EAAE;QACjB,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,gBAAgB,CAACjB,MAAM,EAAEa,CAAC,IAAI,CAAC,EAAE;UACjDK,QAAQ,CAACJ,IAAI,CAAC,CAACG,gBAAgB,CAACJ,CAAC,CAAC,EAAEI,gBAAgB,CAACJ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjE;QACAvB,eAAe,CAAC4B,QAAQ,CAAC;QACzB1B,YAAY,CAAC,EAAE,CAAC;QAChBI,eAAe,CAAC,CAAC,CAAC;MACtB;IACJ,CAAC,MAAM;MACHA,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;IACrC;EACJ,CAAC;EAED,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACjB,IAAIxB,YAAY,GAAG,CAAC,EAAE;MAClBH,YAAY,CAACD,SAAS,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACpChB,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;IACrC;EACJ,CAAC;EAGD,MAAMyB,YAAY,GAAIC,SAAS,IAAK;IAChC,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,OAAO;IAClC,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,aAAa;IACxC,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,gBAAgB;IAC3C,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,aAAa;IACzC,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,aAAa;IACzC,IAAIA,SAAS,IAAI,EAAE,EAAE,OAAO,aAAa;IACzC,IAAIA,SAAS,IAAI,GAAG,EAAE,OAAO,cAAc;IAC3C,IAAIA,SAAS,IAAI,GAAG,EAAE,OAAO,cAAc;IAC3C,IAAIA,SAAS,IAAI,GAAG,EAAE,OAAO,cAAc;IAC3C,IAAIA,SAAS,IAAI,IAAI,EAAE,OAAO,eAAe;IAC7C,OAAO,EAAE;EACb,CAAC;EAED,MAAMC,oBAAoB,GAAG3B,YAAY,GAAG,CAAC;EAC7C,MAAM4B,aAAa,GAAGlC,YAAY,CAACW,MAAM,GAAGP,gBAAgB,CAACO,MAAM,GAAG,CAAC;EACvE,MAAMwB,SAAS,GAAGJ,YAAY,CAAC/B,YAAY,CAACW,MAAM,GAAG,CAAC,GAAGP,gBAAgB,CAACO,MAAM,CAAC;EAEjF,oBACId,OAAA;IAAAuC,QAAA,gBACIvC,OAAA;MAAAuC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvB,CAAChC,MAAM,iBACJX,OAAA;MAAAuC,QAAA,gBACIvC,OAAA;QAAAuC,QAAA,GAAG,mBAAiB,EAACH,oBAAoB,EAAC,UAAQ,EAACC,aAAa;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrE3C,OAAA;QAAAuC,QAAA,GAAG,iBAAe,EAACD,SAAS;MAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CACR,EACAhC,MAAM,gBACHX,OAAA;MAAAuC,QAAA,gBACIvC,OAAA;QAAAuC,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChB3C,OAAA,CAACF,WAAW;QAAC8C,KAAK,EAAEjC;MAAO;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,gBAEN3C,OAAA;MAAAuC,QAAA,GACKpC,YAAY,CAACW,MAAM,GAAG,CAAC,IAAIX,YAAY,CAACM,YAAY,CAAC,iBAClDT,OAAA;QAAK6C,SAAS,EAAC,SAAS;QAAAN,QAAA,EACnBpC,YAAY,CAACM,YAAY,CAAC,CAACqC,GAAG,CAAC,CAAChB,KAAK,EAAEiB,KAAK,kBACzC/C,OAAA;UAAiB6C,SAAS,EAAC,MAAM;UAACG,OAAO,EAAEA,CAAA,KAAMnB,WAAW,CAACC,KAAK,CAAE;UAAAS,QAAA,eAChEvC,OAAA,CAACF,WAAW;YAAC8C,KAAK,EAAEd;UAAM;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC,GADvBI,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR,EACAlC,YAAY,GAAG,CAAC,iBAAIT,OAAA;QAAQgD,OAAO,EAAEf,MAAO;QAAAM,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACzC,EAAA,CAjHID,UAAU;AAAAgD,EAAA,GAAVhD,UAAU;AAmHhB,eAAeA,UAAU;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}