{"ast":null,"code":"var _jsxFileName = \"/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  const [currentRound, setCurrentRound] = useState([]);\n  const [nextRound, setNextRound] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [matchupIndex, setMatchupIndex] = useState(0);\n  useEffect(() => {\n    initializeTournament();\n  }, []);\n  const initializeTournament = () => {\n    const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n    let initialRound = [];\n    let automaticWinners = [];\n\n    // Splitting the movies into matchups and automatic winners\n    while (shuffledMovies.length > 1) {\n      if (shuffledMovies.length % 2 === 1 && automaticWinners.length === 0) {\n        automaticWinners.push(shuffledMovies.pop());\n      }\n      initialRound.push([shuffledMovies.shift(), shuffledMovies.shift()]);\n    }\n    setCurrentRound(initialRound);\n    setNextRound(automaticWinners);\n  };\n  const selectMovie = movie => {\n    if (winner) return; // If a winner has already been decided, ignore further selections\n\n    let updatedNextRound = [...nextRound];\n    if (currentRound[matchupIndex].length === 1 || currentRound[matchupIndex][0] === movie || currentRound[matchupIndex][1] === movie) {\n      updatedNextRound.push(movie);\n    }\n    if (matchupIndex < currentRound.length - 1) {\n      setMatchupIndex(matchupIndex + 1);\n    } else if (updatedNextRound.length === 1) {\n      setWinner(updatedNextRound[0]);\n    } else {\n      setCurrentRound(createRound(updatedNextRound));\n      setNextRound([]);\n      setMatchupIndex(0);\n    }\n  };\n  const createRound = winners => {\n    let newRound = [];\n    for (let i = 0; i < winners.length; i += 2) {\n      newRound.push(winners.slice(i, i + 2));\n    }\n    return newRound;\n  };\n  const getRoundName = numMovies => {\n    if (numMovies <= 2) return 'Final';\n    if (numMovies <= 4) return 'Semi Finals';\n    if (numMovies <= 8) return 'Quarter Finals';\n    if (numMovies <= 16) return 'Round of 16';\n    if (numMovies <= 32) return 'Round of 32';\n    if (numMovies <= 64) return 'Round of 64';\n    if (numMovies <= 128) return 'Round of 128';\n    if (numMovies <= 256) return 'Round of 256';\n    if (numMovies <= 512) return 'Round of 512';\n    if (numMovies <= 1024) return 'Round of 1024';\n    return '';\n  };\n  if (winner) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Winner:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MoviePoster, {\n        title: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n  const roundName = getRoundName(currentRound.length * 2);\n  const totalMatchups = currentRound.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tournament Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Matchup: \", matchupIndex + 1, \" out of \", totalMatchups]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Round: \", roundName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matchup\",\n      children: currentRound[matchupIndex].map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => selectMovie(movie),\n        children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n          title: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(Tournament, \"g2y5g7W3BfU9HH/eE88wJSv4GXE=\");\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useEffect","movies","MoviePoster","jsxDEV","_jsxDEV","Tournament","_s","currentRound","setCurrentRound","nextRound","setNextRound","winner","setWinner","matchupIndex","setMatchupIndex","initializeTournament","shuffledMovies","sort","Math","random","initialRound","automaticWinners","length","push","pop","shift","selectMovie","movie","updatedNextRound","createRound","winners","newRound","i","slice","getRoundName","numMovies","children","fileName","_jsxFileName","lineNumber","columnNumber","title","roundName","totalMatchups","className","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\n\nconst Tournament = () => {\n    const [currentRound, setCurrentRound] = useState([]);\n    const [nextRound, setNextRound] = useState([]);\n    const [winner, setWinner] = useState(null);\n    const [matchupIndex, setMatchupIndex] = useState(0);\n\n    useEffect(() => {\n        initializeTournament();\n    }, []);\n\n    const initializeTournament = () => {\n        const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n        let initialRound = [];\n        let automaticWinners = [];\n\n        // Splitting the movies into matchups and automatic winners\n        while (shuffledMovies.length > 1) {\n            if (shuffledMovies.length % 2 === 1 && automaticWinners.length === 0) {\n                automaticWinners.push(shuffledMovies.pop());\n            }\n            initialRound.push([shuffledMovies.shift(), shuffledMovies.shift()]);\n        }\n\n        setCurrentRound(initialRound);\n        setNextRound(automaticWinners);\n    };\n\n    const selectMovie = (movie) => {\n        if (winner) return; // If a winner has already been decided, ignore further selections\n\n        let updatedNextRound = [...nextRound];\n        if (currentRound[matchupIndex].length === 1 || currentRound[matchupIndex][0] === movie || currentRound[matchupIndex][1] === movie) {\n            updatedNextRound.push(movie);\n        }\n\n        if (matchupIndex < currentRound.length - 1) {\n            setMatchupIndex(matchupIndex + 1);\n        } else if (updatedNextRound.length === 1) {\n            setWinner(updatedNextRound[0]);\n        } else {\n            setCurrentRound(createRound(updatedNextRound));\n            setNextRound([]);\n            setMatchupIndex(0);\n        }\n    };\n\n    const createRound = (winners) => {\n        let newRound = [];\n        for (let i = 0; i < winners.length; i += 2) {\n            newRound.push(winners.slice(i, i + 2));\n        }\n        return newRound;\n    };\n\n\n    const getRoundName = (numMovies) => {\n        if (numMovies <= 2) return 'Final';\n        if (numMovies <= 4) return 'Semi Finals';\n        if (numMovies <= 8) return 'Quarter Finals';\n        if (numMovies <= 16) return 'Round of 16';\n        if (numMovies <= 32) return 'Round of 32';\n        if (numMovies <= 64) return 'Round of 64';\n        if (numMovies <= 128) return 'Round of 128';\n        if (numMovies <= 256) return 'Round of 256';\n        if (numMovies <= 512) return 'Round of 512';\n        if (numMovies <= 1024) return 'Round of 1024';\n        return '';\n    };\n\n    if (winner) {\n        return (\n            <div>\n                <h3>Winner:</h3>\n                <MoviePoster title={winner} />\n            </div>\n        );\n    }\n\n    const roundName = getRoundName(currentRound.length * 2);\n    const totalMatchups = currentRound.length;\n\n    return (\n        <div>\n            <h2>Tournament Mode</h2>\n            <p>Current Matchup: {matchupIndex + 1} out of {totalMatchups}</p>\n            <p>Current Round: {roundName}</p>\n            <div className=\"matchup\">\n                {currentRound[matchupIndex].map((movie, index) => (\n                    <div key={index} className=\"card\" onClick={() => selectMovie(movie)}>\n                        <MoviePoster title={movie} />\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Tournament;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}