{"ast":null,"code":"var _jsxFileName = \"/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tournament = () => {\n  _s();\n  const [currentRound, setCurrentRound] = useState([]);\n  const [winner, setWinner] = useState(null);\n  const [matchupIndex, setMatchupIndex] = useState(0);\n  useEffect(() => {\n    initializeTournament();\n  }, []);\n  const initializeTournament = () => {\n    const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n    const rounds = [];\n    while (shuffledMovies.length > 1) {\n      let round = [];\n      for (let i = 0; i < shuffledMovies.length; i += 2) {\n        if (i + 1 < shuffledMovies.length) {\n          round.push([shuffledMovies[i], shuffledMovies[i + 1]]);\n        } else {\n          round.push([shuffledMovies[i]]);\n        }\n      }\n      rounds.push(round);\n      shuffledMovies.splice(0, shuffledMovies.length, ...round.map(matchup => matchup[Math.floor(Math.random() * matchup.length)]));\n    }\n    setCurrentRound(rounds[0]);\n    rounds.splice(0, 1);\n    localStorage.setItem('remainingRounds', JSON.stringify(rounds));\n  };\n  const selectMovie = movie => {\n    let remainingRounds = JSON.parse(localStorage.getItem('remainingRounds')) || [];\n    let currentRoundWinners = currentRound.map(matchup => matchup.includes(movie) ? movie : null).filter(winner => winner);\n    if (remainingRounds.length === 0 && currentRoundWinners.length === 1) {\n      setWinner(movie);\n      return;\n    }\n    if (matchupIndex < currentRound.length - 1) {\n      setMatchupIndex(matchupIndex + 1);\n    } else {\n      const nextRound = remainingRounds[0];\n      remainingRounds.splice(0, 1);\n      localStorage.setItem('remainingRounds', JSON.stringify(remainingRounds));\n      setCurrentRound(nextRound);\n      setMatchupIndex(0);\n    }\n  };\n  const getRoundName = numMovies => {\n    if (numMovies <= 2) return 'Final';\n    if (numMovies <= 4) return 'Semi Finals';\n    if (numMovies <= 8) return 'Quarter Finals';\n    if (numMovies <= 16) return 'Round of 16';\n    if (numMovies <= 32) return 'Round of 32';\n    if (numMovies <= 64) return 'Round of 64';\n    if (numMovies <= 128) return 'Round of 128';\n    if (numMovies <= 256) return 'Round of 256';\n    if (numMovies <= 512) return 'Round of 512';\n    if (numMovies <= 1024) return 'Round of 1024';\n    return '';\n  };\n  if (winner) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Winner:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MoviePoster, {\n        title: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n  const roundName = getRoundName(currentRound.length * 2);\n  const totalMatchups = currentRound.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tournament Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Matchup: \", matchupIndex + 1, \" out of \", totalMatchups]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Round: \", roundName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"matchup\",\n      children: currentRound[matchupIndex].map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => selectMovie(movie),\n        children: /*#__PURE__*/_jsxDEV(MoviePoster, {\n          title: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(Tournament, \"pnXbmeKWJF2b8+Q+rMQajzyqAwg=\");\n_c = Tournament;\nexport default Tournament;\nvar _c;\n$RefreshReg$(_c, \"Tournament\");","map":{"version":3,"names":["React","useState","useEffect","movies","MoviePoster","jsxDEV","_jsxDEV","Tournament","_s","currentRound","setCurrentRound","winner","setWinner","matchupIndex","setMatchupIndex","initializeTournament","shuffledMovies","sort","Math","random","rounds","length","round","i","push","splice","map","matchup","floor","localStorage","setItem","JSON","stringify","selectMovie","movie","remainingRounds","parse","getItem","currentRoundWinners","includes","filter","nextRound","getRoundName","numMovies","children","fileName","_jsxFileName","lineNumber","columnNumber","title","roundName","totalMatchups","className","index","onClick","_c","$RefreshReg$"],"sources":["/Users/nicocamachoa/Downloads/DisApp/disney-movie-ranker/src/Tournament.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport movies from './movies';\nimport MoviePoster from './MoviePoster';\nimport './TournamentStyles.css';\n\nconst Tournament = () => {\n    const [currentRound, setCurrentRound] = useState([]);\n    const [winner, setWinner] = useState(null);\n    const [matchupIndex, setMatchupIndex] = useState(0);\n\n    useEffect(() => {\n        initializeTournament();\n    }, []);\n\n    const initializeTournament = () => {\n        const shuffledMovies = [...movies].sort(() => 0.5 - Math.random());\n        const rounds = [];\n\n        while (shuffledMovies.length > 1) {\n            let round = [];\n            for (let i = 0; i < shuffledMovies.length; i += 2) {\n                if (i + 1 < shuffledMovies.length) {\n                    round.push([shuffledMovies[i], shuffledMovies[i + 1]]);\n                } else {\n                    round.push([shuffledMovies[i]]);\n                }\n            }\n            rounds.push(round);\n            shuffledMovies.splice(0, shuffledMovies.length, ...round.map(matchup => matchup[Math.floor(Math.random() * matchup.length)]));\n        }\n\n        setCurrentRound(rounds[0]);\n        rounds.splice(0, 1);\n        localStorage.setItem('remainingRounds', JSON.stringify(rounds));\n    };\n\n    const selectMovie = (movie) => {\n        let remainingRounds = JSON.parse(localStorage.getItem('remainingRounds')) || [];\n        let currentRoundWinners = currentRound.map(matchup => matchup.includes(movie) ? movie : null).filter(winner => winner);\n\n        if (remainingRounds.length === 0 && currentRoundWinners.length === 1) {\n            setWinner(movie);\n            return;\n        }\n\n        if (matchupIndex < currentRound.length - 1) {\n            setMatchupIndex(matchupIndex + 1);\n        } else {\n            const nextRound = remainingRounds[0];\n            remainingRounds.splice(0, 1);\n            localStorage.setItem('remainingRounds', JSON.stringify(remainingRounds));\n            setCurrentRound(nextRound);\n            setMatchupIndex(0);\n        }\n    };\n\n\n    const getRoundName = (numMovies) => {\n        if (numMovies <= 2) return 'Final';\n        if (numMovies <= 4) return 'Semi Finals';\n        if (numMovies <= 8) return 'Quarter Finals';\n        if (numMovies <= 16) return 'Round of 16';\n        if (numMovies <= 32) return 'Round of 32';\n        if (numMovies <= 64) return 'Round of 64';\n        if (numMovies <= 128) return 'Round of 128';\n        if (numMovies <= 256) return 'Round of 256';\n        if (numMovies <= 512) return 'Round of 512';\n        if (numMovies <= 1024) return 'Round of 1024';\n        return '';\n    };\n\n    if (winner) {\n        return (\n            <div>\n                <h3>Winner:</h3>\n                <MoviePoster title={winner} />\n            </div>\n        );\n    }\n\n    const roundName = getRoundName(currentRound.length * 2);\n    const totalMatchups = currentRound.length;\n\n    return (\n        <div>\n            <h2>Tournament Mode</h2>\n            <p>Current Matchup: {matchupIndex + 1} out of {totalMatchups}</p>\n            <p>Current Round: {roundName}</p>\n            <div className=\"matchup\">\n                {currentRound[matchupIndex].map((movie, index) => (\n                    <div key={index} className=\"card\" onClick={() => selectMovie(movie)}>\n                        <MoviePoster title={movie} />\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Tournament;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}